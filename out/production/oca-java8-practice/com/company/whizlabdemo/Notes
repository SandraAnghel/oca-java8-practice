Object Reference vs Primitive Variables
    - object reference variables store the address of objects they refer to
    - primitive variables store actual values

Comparison and Assignment
    - Comparison: primitive variables are compared based on their literal values; while object reference variables are compared based on the addresses of their associated objects in the memory
    - Assignment: - in the assignment of primitive variable, the value of the right-hand side(RHS) is copied to the left-hand side(LHS), meaning that the LHS variable holds its own value.
                  - the address is copied when assigning a reference variable, resulting in the LHS variable pointing to the same object returned by the expression on the RHS

Parameter Passing and Value Returning
    - Parameter passing: a primitive variable is passed in a method by actual value, implying that changes made to the parameter are independent of the passed-in argument;
    whereas an object in the memory, meaning that any changes made to the parameter are reflected in the argument
    - Value returning: a primitive variable is returned from a method by actual value and this variable dies after the method finishes execution; while an object reference
    is returned by the address of the referenced object in the memory and the original object may survive the method completion if it is assigned to a variable outside the method